import { Service } from 'typedi';
import { PubsubService } from './pubsub.service';
import { TelegramService } from './telegram.service';

@Service()
export class CommunicationService {
  constructor(
    private readonly pubsubService: PubsubService,
    private readonly telegramService: TelegramService,
  ) {}

  async sendMessageToChat(chatId: string, ...messages: string[]): Promise<void> {
    if (messages.length === 0) {
      return;
    }

    if (messages.length === 1) {
      const [message] = messages;

      return await this.telegramService.sendHtml(chatId, message);
    }

    await this.pubsubService.publish('telegram-bot-messages', {
      chatId,
      messages,
    });
  }

  async sendErrorMessage(chatId: string): Promise<void> {
    await this.sendMessageToChat(chatId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!');
  }

  async sendThankYouMessage(chatId: string): Promise<void> {
    await this.sendMessageToChat(
      chatId,
      '–°–ø–∞—Å–∏–±–æ! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 12:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ üçΩ',
    );
  }

  async sendGoodByeMessage(chatId: string): Promise<void> {
    await this.sendMessageToChat(chatId, '–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –í—ã –Ω–∞—Å –ø–æ–∫–∏–¥–∞–µ—Ç–µ üòø');
  }
}
