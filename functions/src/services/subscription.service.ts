import { Service } from 'typedi';
import { SubscriptionRepository } from '../repositories/subscription.repository';
import { CommunicationService } from './communication.service';

@Service()
export class SubscriptionService {
  constructor(
    private readonly subscriptionRepository: SubscriptionRepository,
    private readonly communicationService: CommunicationService,
  ) {}

  async addSubscription(id: string): Promise<void> {
    await this.subscriptionRepository.addSubscription({
      id,
    });

    this.communicationService.sendMessage(
      id,
      '–°–ø–∞—Å–∏–±–æ! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 12:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ üçΩ',
    );
  }

  async removeSubscription(id: string): Promise<void> {
    await this.subscriptionRepository.deleteSubscription(id);

    this.communicationService.sendMessage(id, '–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –í—ã –Ω–∞—Å –ø–æ–∫–∏–¥–∞–µ—Ç–µ üòø');
  }
}
