import { Service } from 'typedi';
import { SubscriptionService } from './subscription.service';
import { Telegraf, Context } from 'telegraf';
import { Update } from 'typegram';
import { ServerResponse } from 'http';
import { ConfigurationService } from './configuration.service';

@Service()
export default class BotService {
  private readonly bot?: Telegraf<Context>;

  constructor(
    private readonly subscriptionService: SubscriptionService,
    private readonly configurationService: ConfigurationService
  ) {
    this.bot = this.createTelegraf(
      this.configurationService.botToken,
      this.configurationService.functionRegion
    );

    if (this.bot) {
      this.configureBot(this.bot);
    }
  }

  async handleRequest(body: Update, response: ServerResponse): Promise<void> {
    if (this.validateBot()) {
      await this.bot.handleUpdate(body, response);
    }
  }

  async sendHtml(subscriberId: string, html: string): Promise<void> {
    if (this.validateBot()) {
      await this.bot.telegram.sendMessage(subscriberId, html, { parse_mode: 'HTML' });
    }
  }

  private validateBot(): boolean {
    if (!this.bot) {
      console.log('Can not perform action because bot is not configured');
    }

    return !!this.bot;
  }

  private createTelegraf(token: string, region: string): Telegraf<Context> | undefined {
    if (!token) {
      console.error('Unable to run bot because bot token is empty');

      return undefined;
    }

    const bot = new Telegraf(token);
    bot.telegram.setWebhook(`https://${region}-generate-menu.cloudfunctions.net/telegramBotHook`);

    return bot;
  }

  private configureBot(bot: Telegraf<Context>): Telegraf<Context> {
    bot.start(async (context) => {
      const chatId = context.chat.id.toFixed(0);

      await this.subscriptionService.addSubscription({
        id: chatId,
      });

      await context.reply(
        '–°–ø–∞—Å–∏–±–æ! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 12:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ üçΩ'
      );
    });

    bot.command('stop', async (context) => {
      const chatId = context.chat.id.toFixed(0);

      await this.subscriptionService.deleteSubscription(chatId);

      await context.reply('–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –í—ã –Ω–∞—Å –ø–æ–∫–∏–¥–∞–µ—Ç–µ üòø');
    });

    bot.catch((error, context) => {
      console.log(
        `Ooops, encountered an error for ${context.updateType}`,
        error
      );
    });

    bot.on('text', (context) =>
      context.reply(
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏ /stop, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.'
      )
    );

    return bot;
  }
}
