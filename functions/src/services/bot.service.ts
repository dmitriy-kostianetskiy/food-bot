import * as functions from 'firebase-functions';

import { Service } from 'typedi';
import { SubscriptionService } from './subscription.service';
import Telegraf from 'telegraf';
import { TelegrafContext } from 'telegraf/typings/context';

@Service()
export default class BotService {
  readonly bot: Telegraf<TelegrafContext>;

  constructor (private subscriptionService: SubscriptionService) {
    this.bot = this.createBot();
  }

  private createBot(): Telegraf<TelegrafContext> {
    const bot = new Telegraf(functions.config().bot.key);

    bot.start(async (context) => {
      const chatId = context.chat.id.toFixed(0);

      await this.subscriptionService.addSubscription({
        id: chatId
      });

      await context.reply('–°–ø–∞—Å–∏–±–æ! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 12:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ üçΩ');
    });
    
    bot.command('stop', async (context) => {
      const chatId = context.chat.id.toFixed(0);
      
      await this.subscriptionService.deleteSubscription(chatId);

      await context.reply('–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –í—ã –Ω–∞—Å –ø–æ–∫–∏–¥–∞–µ—Ç–µ üòø');
    });

    bot.catch((error, context) => {
      console.log(`Ooops, encountered an error for ${context.updateType}`, error);
    });

    bot.on('text', context => context.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏ /stop, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.'));

    return bot;
  }
}

