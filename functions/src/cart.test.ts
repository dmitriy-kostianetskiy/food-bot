import { Cart } from "./cart";

const CATEGORIES = {
  ['–ú–æ—Ä–∫–æ–≤—å']: '–û–≤–æ—â–∏',
  ['–ü–æ–º–∏–¥–æ—Ä']: '–û–≤–æ—â–∏',
  ['–Ø–±–ª–æ–∫–æ']: '–§—Ä—É–∫—Ç—ã',
};

test('should place apples and carrots into fruits and vegetables categories accordingly', () => {
  const cart = new Cart(
    [
      {
        recipes: [
          {
            ingredients: [
              {
                name: '–ú–æ—Ä–∫–æ–≤—å',
                amount: 1,
                unit: '–∫–≥'
              },
              {
                name: '–Ø–±–ª–æ–∫–æ',
                amount: 2,
                unit: '—à—Ç'
              }
            ],
            steps: []
          }
        ]
      }
    ],
    name => CATEGORIES[name]
  );

  expect(cart.print()).toBe(
`üõí <b>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:</b>
<b>–û–≤–æ—â–∏</b>
 - –ú–æ—Ä–∫–æ–≤—å - 1 –∫–≥ (1)
<b>–§—Ä—É–∫—Ç—ã</b>
 - –Ø–±–ª–æ–∫–æ - 2 —à—Ç (1)`
  );
});

test('should set indexes and sum up weight accordingly', () => {
  const cart = new Cart(
    [
      {
        recipes: [
          {
            ingredients: [
              {
                name: '–ú–æ—Ä–∫–æ–≤—å',
                amount: 1,
                unit: '–∫–≥'
              },
              {
                name: '–Ø–±–ª–æ–∫–æ',
                amount: 2,
                unit: '—à—Ç'
              }
            ],
            steps: []
          }
        ]
      },
      {
        recipes: [
          {
            ingredients: [
              {
                name: '–ú–æ—Ä–∫–æ–≤—å',
                amount: 3,
                unit: '–∫–≥'
              },
              {
                name: '–Ø–±–ª–æ–∫–æ',
                amount: 3,
                unit: '—à—Ç'
              }
            ],
            steps: []
          }
        ]
      }
    ],
    name => CATEGORIES[name]
  );

  expect(cart.print()).toBe(
`üõí <b>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:</b>
<b>–û–≤–æ—â–∏</b>
 - –ú–æ—Ä–∫–æ–≤—å - 4 –∫–≥ (1, 2)
<b>–§—Ä—É–∫—Ç—ã</b>
 - –Ø–±–ª–æ–∫–æ - 5 —à—Ç (1, 2)`
  );
});
