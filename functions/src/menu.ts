import * as _ from 'lodash';

import { CategoryModel, MealModel, RecipeModel } from './model';

import { Cart } from './cart';
import { MenuModel } from './model/menu-model';

export class Menu {
  readonly cart = new Cart(this.menu, this.categories)

  constructor(
    readonly menu: MenuModel,
    readonly categories: CategoryModel[]
  ) {}

  print(): string[] {
    return this.menu.dinners.map((item, index) => this.printRecipe(item, index));
  }

  printWithCart(): string[] {
    return [
      ...this.print(),
      this.cart.print()
    ];
  }

  private printRecipe(recipe: RecipeModel, index: number): string {
    let result = '';
  
    result += this.printMeal(recipe.main);
    if (recipe.side) {
      result += '\n' + this.printMeal(recipe.side);

    }
  
    return `<b>üçú –£–∂–∏–Ω ‚Ññ ${index + 1}</b>\n<i>‚è≥ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ${recipe.readyIn}</i>\n${result}`;
  }

  private printMeal(meal: MealModel): string {
    const ingredients = meal.ingredients
      .map(({ amount, unit, title }) => amount && unit ? `- ${title} - ${amount} ${unit}` : `- ${title}`)
      .join('\n');
  
    const steps = meal.steps
      .map((item, index) => `${this.printNumber(index + 1)} ${item}`)
      .join('\n');
  
    return `üçó <b>${meal.title}</b>\n\nüõí <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n${ingredients}\n\nüçΩ <b>–†–µ—Ü–µ–ø—Ç:</b>\n${steps}`;
  }

  private printNumber(value: number): string {
    return _.map(value.toFixed(0), item => {
      switch (item) {
        case '0': return '0Ô∏è‚É£';
        case '1': return '1Ô∏è‚É£';
        case '2': return '2Ô∏è‚É£';
        case '3': return '3Ô∏è‚É£';
        case '4': return '4Ô∏è‚É£';
        case '5': return '5Ô∏è‚É£';
        case '6': return '6Ô∏è‚É£';
        case '7': return '7Ô∏è‚É£';
        case '8': return '8Ô∏è‚É£';
        case '9': return '9Ô∏è‚É£';
        default: return item;
      }
    }).join('');
  }
}
